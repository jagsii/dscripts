exports=async function(bid,options){const{parseCatalog,collect}=await require("transcode/parse_catalog"),{send}=require("http"),URL=require("url"),url=`http://www.1biqug.net/book/${bid}/`;return parseCatalog(url,null,{clientOptions:{...(options&&options.clientOptions)},parser:async html=>{const fragments=cleanHTML(html).subRegexAll(/class="list"[^>]*>(\s*<dl>(?:\s*<dt[^>]*>[^<]+<\/dt>|\s*<dd[^>]*>\s*<a[^>]+>[^<]+<\/a>\s*<\/dd>)+)/g),regex={recordRegex:/<dt[^>]*>(?:\s*(?:<b>)?[^<]+<\/b>)?(?<volume>[^<]+)<\/dt>|<dd>\s*<[aA] [^>]*href\s*=["'](?<url>[^"']+)["'][^>]*>(?<name>[^<]+)</g},uri=new URL(url),catalogs=[];for(let fragment of fragments)catalogs.push(await collect(fragment,regex,uri,{}));if(0<catalogs.length&&-1!==html.indexOf("loadzj(")){const response=await send({url:uri.resolve("/action.php"),method:"POST",headers:{"X-Requested-With":"XMLHttpRequest","Content-Type":"application/x-www-form-urlencoded; charset=UTF-8",Referer:url},body:`action=clist&bookid=${bid}`},options?.clientOptions);assertOK(response),html=response.body;const chapters=JSON.parse(html).columnlist.map(v=>{const column=v.columnname;return v.chapterlist.map(_=>({id:_.chapterid+"",name:_.chaptername,url:uri.resolve(`/book/${bid}/${_.chapterid}.html`),volume:column}))}).flat();catalogs.splice(1,0,chapters);}return catalogs.flat()}})};