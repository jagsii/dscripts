exports=async function(url,bid,cid,options){const{parseContent,collectLines}=await require("transcode/parse_content"),replacePinYin=await require("transcode/pinyin_map"),clientOptions={...(options&&options.clientOptions),encoding:"gbk"};return parseContent(url,null,{clientOptions,parser:async html=>{let p=html.indexOf("class=\"content\"");if(-1===p)return null;let fragment=html.substring(p);fragment=replacePinYin(fragment.substring(fragment.indexOf(">")+1),/<img src="ute\/(\w+)\.jpg">/g),fragment=fragment.substring(0,fragment.indexOf("</td"));const url2=fragment.subRegex(/src="(\/utex\.asp\?bid=\d+&id=\d+)"/);if(p=fragment.indexOf("<<a"),-1!==p&&(fragment=fragment.substring(0,p)),p=fragment.indexOf("<script"),-1!==p&&(fragment=fragment.substring(0,p)),url2){const{send}=require("http"),absoluteUrl=require("utils/absolute_url"),response=await send({url:absoluteUrl(url2,url),headers:{Referer:url}},clientOptions);assertOK(response);const html2=response.body,fragment2=html2.substring(html2.indexOf("(\"")+2,html2.lastIndexOf("\")"));fragment+=fragment2;}const result=[];return collectLines(fragment,result),result}})};