exports=async function(bid,options){const{parseCatalogPaginate,cleanCatalogWrapper}=await require("transcode/parse_catalog"),clientOptions={...(options&&options.clientOptions)};let ignoresMatcher;return parseCatalogPaginate(page=>`http://www.jxdwx.com/book/${bid}/${1===page?"":page-1+"/"}`,{cleaner:html=>cleanCatalogWrapper(html,/<ul class="section-list[^"]*"[^>]*>/,"</ul>",-1),recordRegex:/href="(?<url>[^"]+)">(?<name>[^<]+)</g},{...options,clientOptions,pageSize:100,totalPagesRegex:html=>{const matcher=/<option value="\/book\/\d+\/(?<totalPages>\d+)\/">[^<]+<\/option>\s*<\/select>/.exec(html);return matcher?parseInt(matcher.groups.totalPages)+1:2},totalPagesOffset:1,totalPagesTryPage:2,preprocess:html=>(ignoresMatcher=html.subRegexMapAll(/ul\.section-list>li:nth(?<last>-last)?-child\((?<index>\d+)\){display:none}/g),html)}).then(_=>{if(ignoresMatcher&&0<ignoresMatcher.length){const ignores=ignoresMatcher.map(ig=>{let index=parseInt(ig.index);return ig.last?index=_.catalog.length-index:index-=1,index});_.catalog=_.catalog.filter((c,i)=>-1===ignores.indexOf(i));}return _})};