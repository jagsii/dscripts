exports=async function(a,b){const{parseCatalogPaginate:c,cleanCatalogWrapper:d}=await require("transcode/parse_catalog"),e={...(b&&b.clientOptions)};let f;return c(b=>`http://www.jxdwx.com/book/${a}/${1===b?"":b-1+"/"}`,{cleaner:a=>d(a,/<ul class="section-list[^"]*"[^>]*>/,"</ul>",-1),recordRegex:/href="(?<url>[^"]+)">(?<name>[^<]+)</g},{...b,clientOptions:e,pageSize:100,totalPagesRegex:a=>{const b=/<option value="\/book\/\d+\/(?<totalPages>\d+)\/">[^<]+<\/option>\s*<\/select>/.exec(a);return b?parseInt(b.groups.totalPages)+1:2},totalPagesOffset:1,totalPagesTryPage:2,preprocess:a=>(f=a.subRegexMapAll(/ul\.section-list>li:nth(?<last>-last)?-child\((?<index>\d+)\){display:none}/g),a)}).then(a=>{if(f&&0<f.length){const b=f.map(b=>{let c=parseInt(b.index);return b.last?c=a.catalog.length-c:c-=1,c});a.catalog=a.catalog.filter((a,c)=>-1===b.indexOf(c));}return a})};