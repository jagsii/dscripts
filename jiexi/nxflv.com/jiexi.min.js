exports = async function (videoUrl, options) {
  const {
    send
  } = require('http');

  const CryptoJS = (await require('third-party/crypto-js'))(['aes', 'mode-ecb']);

  const absoluteUrl = require("utils/absolute_url");

  const url1 = `https://www.nxflv.com/?url=${videoUrl}`;
  const videoUrlWordArray = CryptoJS.enc.Utf8.parse(videoUrl);
  const encryptConfig = {
    'mode': CryptoJS.mode.ECB,
    'padding': CryptoJS.pad.Pkcs7
  };
  const encryptKey = CryptoJS.enc.Utf8.parse('Ainxun@nxflv@com');
  const encrypted = CryptoJS.AES.encrypt(videoUrlWordArray, encryptKey, encryptConfig);
  const vkey = encrypted.toString();
  const body = {
    'url': videoUrl,
    'wap': '0',
    'vkey': vkey
  };
  const url2 = absoluteUrl('Vip.php', url1);
  let response = await send({
    url: url2,
    method: 'POST',
    headers: {
      'X-Requested-With': 'XMLHttpRequest',
      'Referer': url1,
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    body: body
  });
  assertOK(response);
  let html = response.body;
  console.log(html);
  const data = JSON.parse(html);

  if (data.code != 200 || data.type === 'iframe' || data.type === 'iqiyi') {
    return null;
  }

  let url = data.url;

  if (url.indexOf('AINX') !== -1) {
    const ciphertext = url.replace(/AINX/, '');
    const decryptConfig = {
      'mode': CryptoJS.mode.ECB,
      'padding': CryptoJS.pad.Pkcs7
    };
    const decryptKey = CryptoJS.enc.Utf8.parse('loveme@nxflv@com');
    const decrypted = CryptoJS.AES.decrypt(ciphertext, decryptKey, decryptConfig);
    url = decrypted.toString(CryptoJS.enc.Utf8);
  }

  return {
    url
  };
};