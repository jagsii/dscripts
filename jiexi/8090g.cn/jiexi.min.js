exports = async function (videoUrl, options) {
  const {
    send
  } = require('http');

  const CryptoJS = (await require('third-party/crypto-js'))(['aes', 'hmac', 'sha256', 'pad-zeropadding']);

  function sign(a) {
    var b = CryptoJS.MD5(a);
    var c = CryptoJS.enc.Utf8.parse(b);
    var d = CryptoJS.enc.Utf8.parse('6c766c40e848941e');
    var e = CryptoJS.AES.encrypt(a, c, {
      iv: d,
      mode: CryptoJS.mode.CBC,
      padding: CryptoJS.pad.ZeroPadding
    });
    return e.toString();
  }

  function hex_md5(s) {
    return CryptoJS.MD5(s).toString(CryptoJS.enc.Hex);
  }

  const time = Date.now().toString();
  const wap = null;
  const vurl = encodeURIComponent(videoUrl);
  const key = sign(hex_md5(time + vurl));
  const response = await send({
    url: "https://122.228.8.29:4433/xmflv.js",
    method: 'POST',
    headers: {
      'Accept': 'application/json, text/plain, */*',
      'X-Requested-With': 'XMLHttpRequest',
      'Content-Type': 'application/x-www-form-urlencoded'
    },
    body: `wap=${wap}&url=${encodeURIComponent(vurl)}&time=${time}&key=${encodeURIComponent(key)}`
  }, { ...options?.clientOptions,
    'x-mobile': 1
  });
  assertOK(response);
  const html = response.body;
  const stray = JSON.parse(html);

  if (!stray.url) {
    return null;
  }

  function decrypt(_0x4a6521, _0x39ba56, _0x59397c) {
    let _0x1fc90f = CryptoJS.AES.decrypt(_0x4a6521, CryptoJS.enc.Utf8.parse(_0x39ba56), {
      'iv': CryptoJS.enc.Utf8.parse(_0x59397c),
      'mode': CryptoJS.mode.CBC,
      'padding': CryptoJS.pad.Pkcs7
    });

    return _0x1fc90f.toString(CryptoJS.enc.Utf8);
  }

  const result = decrypt(stray.url, stray["aes_key"], stray['aes_iv']);
  return {
    url: result
  };
};