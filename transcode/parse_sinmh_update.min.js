async function parseUpdate(a,b){b=b||{};const c={url:a,...b.httpOptions},d={encoding:"utf-8","x-mobile":1,...b.clientOptions};let e;if(b.webview){const c=require("webview_fetch");e=await c(a,{mobile:1===d["x-mobile"],...b.webviewOptions});}else {const{send:f}=require("http");stat("request");let g=await f(c,d);if(stat("request"),b.fallbackToWebview&&b.fallbackToWebview(g)){const c=require("webview_fetch");e=await c(a,{mobile:1===d["x-mobile"],...b.webviewOptions});}else assertOK(g),e=g.body;}stat("match");const f=e.subRegex(/<ul id="chapter-list[^>]*>(?:\s*<li>\s*<a[^>]*>\s*<span[^>]*>[^<]*<\/span>\s*<\/a>\s*<\/li>)*\s*<li>\s*<a[^>]*[^>]*href="[^"]+\d+\.html"[^>]*>\s*<span>(?<name>[^<]*)<\/span>\s*<\/a>\s*<\/li>(?:\s*<li>\s*<a[^>]*>\s*<span>下拉式阅读<\/span>\s*<\/a>\s*<\/li>)?\s*<\/ul>/),g=e.subRegex(/<span class="date">(?<updateTime>[^<]*)</);stat("match");const h={url:a,name:f};return g&&(h.updateTime=parseDate(g,b.format||"yyyy-MM-dd HH:mm")),formatUpdate(h)}exports.parseUpdate=parseUpdate;