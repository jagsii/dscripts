async function parseUpdate(a,b){b=b||{};const c={url:a,...b.httpOptions},d={encoding:"utf-8","x-mobile":1,...b.clientOptions},e=require("datetime/parse_date");let f;if(b.webview){const b=require("webview_fetch");f=await b(a,{mobile:1===d["x-mobile"]});}else {const{send:a}=require("http");stat("request");let b=await a(c,d);stat("request"),assertOK(b),f=b.body;}stat("match");const g=f.subRegex(/<ul id="chapter-list[^>]*>(?:\s*<li>\s*<a[^>]*>\s*<span[^>]*>[^<]*<\/span>\s*<\/a>\s*<\/li>)*\s*<li>\s*<a[^>]*[^>]*href="[^"]+\d+\.html"[^>]*>\s*<span>(?<name>[^<]*)<\/span>\s*<\/a>\s*<\/li>(?:\s*<li>\s*<a[^>]*>\s*<span>下拉式阅读<\/span>\s*<\/a>\s*<\/li>)?\s*<\/ul>/),h=f.subRegex(/<span class="date">(?<updateTime>[^<]*)</);stat("match");const i={url:a,name:g};return h&&(i.updateTime=e(h,b.format||"yyyy-MM-dd HH:mm")),i}exports.parseUpdate=parseUpdate;