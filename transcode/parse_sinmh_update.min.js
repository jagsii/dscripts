async function parseUpdate(url,options){options=options||{};const httpOptions={url,...options.httpOptions},clientOptions={encoding:"utf-8","x-mobile":1,...options.clientOptions};let html;if(options.webview){const webviewFetch=require("webview_fetch");html=await webviewFetch(url,{mobile:1===clientOptions["x-mobile"],...options.webviewOptions});}else {const{send}=require("http");stat("request");let response=await send(httpOptions,clientOptions);if(stat("request"),options.fallbackToWebview&&options.fallbackToWebview(response)){const webviewFetch=require("webview_fetch");html=await webviewFetch(url,{mobile:1===clientOptions["x-mobile"],...options.webviewOptions});}else assertOK(response),html=response.body;}stat("match");const name=html.subRegex(/<ul id="chapter-list[^>]*>(?:\s*<li>\s*<a[^>]*>\s*<span[^>]*>[^<]*<\/span>\s*<\/a>\s*<\/li>)*\s*<li>\s*<a[^>]*[^>]*href="[^"]+\d+\.html"[^>]*>\s*<span>(?<name>[^<]*)<\/span>\s*<\/a>\s*<\/li>(?:\s*<li>\s*<a[^>]*>\s*<span>下拉式阅读<\/span>\s*<\/a>\s*<\/li>)?\s*<\/ul>/),updateTime=html.subRegex(/<span class="date">(?<updateTime>[^<]*)</);stat("match");const result={url,name};return updateTime&&(result.updateTime=parseDate(updateTime,options.format||"yyyy-MM-dd HH:mm")),formatUpdate(result)}exports.parseUpdate=parseUpdate;