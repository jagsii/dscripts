function parseRegex(a){if(a instanceof RegExp)return a;if(a instanceof Array)return a;if("Synopsis"===a)return /更新：(?<updateTime>[^<]+)<\/a><\/h2>\s*<div[^>]* class="directoryArea">\s*<p>\s*<a[^>]*>(?<name>[^<]+)</;if("block_txt2"===a)return /<p>更新：(?<updateTime>[^<]*)<\/p>\s*<p>\s*最新：<a[^>]*>(?<name>[^<]*)</;if("meta"===a)return [/<meta property=["']og:novel:update_time["'] content=["'](?<updateTime>[^"']+)["']/,/<meta property=["']og:novel:las?test_chapter_name["'] content=["'](?<name>[^"']+)["']/];if("dd_box"===a)return /<dd>\s*<span style="width: 100%;">更新：(?<updateTime>[^<]+)<\/span>\s*<\/dd>\s*<dd>\s*<span style="width: 100%;">最新：<a[^>]*>(?<name>[^<]+)</;throw new Error(`unknown ParseUpdate regex ${a}`)}async function parseUpdate(a,b,c){c=c||{};const d={url:a,...c.httpOptions},e={encoding:"utf-8","x-mobile":1,...c.clientOptions},f=require("datetime/parse_date");let g;if(c.webview){const b=require("webview_fetch");g=await b(a,{mobile:1===e["x-mobile"]});}else {const a=await sendRetry(d,e,c.retry);g=a.body;}null!=c.preprocess&&(g=c.preprocess(g));const h={url:a,name:"",updateTime:null};if(c.parser)return await c.parser(g,h),h;if("function"==typeof b){const a=b(g);return h.name=a.name,"string"==typeof a.updateTime?h.updateTime=f(a.updateTime,c.format):null!=a.updateTime&&(h.updateTime=a.updateTime),h}else {let a=parseRegex(b);stat("match");let d;if(a instanceof Array){d={};for(let b of a)Object.assign(d,g.subRegexMap(b));}else {let b=a.exec(g);null!=b&&(d=b.groups);}return (stat("match"),null==d)?null:(h.name=d.name,d.updateTime&&(h.updateTime=f(d.updateTime,c.format)),h)}}exports.parseUpdate=parseUpdate;