function parseRegex(regex){if(regex instanceof RegExp)return regex;if(regex instanceof Array)return regex;if("Synopsis"===regex)return [/更新：(?<updateTime>[^<]+)/,/class="directoryArea">\s*<p>\s*<a[^>]*>(?<name>[^<]+)</];if("block_txt2"===regex)return /<p>更新(?:时间)?：(?<updateTime>[^<]*)<\/p>\s*<p>\s*最新(?:更新|章节)?：<a[^>]*>(?<name>[^<]*)</;if("meta"===regex)return [/<meta [^>]*(?:property|name)=["']og:(?:novel:update_time|date)["'] ?content=["'](?<updateTime>[^"']+)["']/,/<meta [^>]*(?:property|name)=["']og:novel:las?t(?:est)?_chapter_(?:name|title)["'] ?content=["'](?<name>[^"']+)["']/];if("dd_box"===regex)return /<dd>\s*<span[^>]*>更新：(?<updateTime>[^<]+)<\/span>\s*<\/dd>\s*<dd>\s*<span[^>]*>最新：<a[^>]*>(?<name>[^<]+)</;if("block-box"===regex)return /最近更新：<\/span>\s*<a [^>]*>(?<name>[^<]+)<\/a>\s*<\/p>\s*<p class="time">\s*<span>更新时间：<\/span>(?<updateTime>[^<]*)/;if("pa"===regex)return /(?:最后)?更新(?:时间)?：\s*(?:<span[^>]*>)?(?<updateTime>[^<]*)(?:<\/span>)?\s*<\/p>\s*<p[^>]*>最新(?:章节|更新)?：\s*<a[^>]+>(?<name>[^<]+)</;if("pap"===regex)return /最[近新](?:更新|章节)：\s*(?:<\/span>)?<a[^>]+>(?<name>[^<]+)<\/a><\/p>\s*<p[^>]*>(?:<span[^>]*>)?(?:最后)?更新(?:时间)?：\s*(?:<\/span>)?(?<updateTime>[^<]+)</;if("li,li>a"===regex)return /更新：(?<updateTime>[^<>]+)<\/li>\s*<li>最新(?:章节)?：<a[^>]*>(?<name>[^<>]+)</;if("li>a,li"===regex)return /最[近新](?:更新|章节)?：<a[^>]*>(?<name>[^<>]+)<\/a>\s*<\/li>\s*<li[^>]*>更新(?:时间)?：(?<updateTime>[^<>]+)</;if("\u66F4\u65B0\uFF1Aa"===regex)return /更新：<a[^>]+>(?<name>[^<]+)</;if("panel-body"===regex)return /最新章节：<a[^>]+>(?<name>[^<]+)<\/a><span[^>]*>（(?<updateTime>[^）]+)）/;if(".pt-chapter"===regex)return [/og:novel:update_time" content="(?<updateTime>[^"]+)"/,/pt-chapter-cont-detail">\s*<a[^>]+>(?<name>[^<]+)</];if("cctxt"===regex)return [/og:novel:update_time"\s+content="(?<updateTime>[^"]+)"/,/class="cf">\s*<li><a[^>]+>(?<name>[^<]+)</];if(".introduce"===regex)return [/更新：(?<updateTime>[^<]+)</,/最新章节：<a[^>]+>(?<name>[^<]+)</];throw new Error(`unknown ParseUpdate regex ${regex}`)}async function parseUpdate(url,regex,options){options=options||{};const clientOptions={encoding:"utf-8","x-mobile":1,...options.clientOptions};let html;if(options.webview){const webviewFetch=require("webview_fetch");html=await webviewFetch(url,{mobile:1===clientOptions["x-mobile"],...options.webviewOptions});}else {const httpOptions={url,...options.httpOptions};options.lvt&&(!httpOptions.headers&&(httpOptions.headers={}),httpOptions.headers={cookie:lvtCookie(options.lvt)});const{send}=require("http");stat("request");let response=await send(httpOptions,clientOptions);if(stat("request"),options.onBlocked&&isBlocked(response))return options.onBlocked().then(formatUpdate);if(null!=options.retry&&(response=await handleRequestRetry(response,httpOptions,clientOptions,send,options.retry)),options.fallbackToWebview&&options.fallbackToWebview(response)){const webviewFetch=require("webview_fetch");html=await webviewFetch(url,{mobile:1===clientOptions["x-mobile"],...options.webviewOptions});}else assertOK(response),html=response.body;}null!=options.preprocess&&(html=await options.preprocess(html));const result={url,name:"",updateTime:null};if(options.parser)return await options.parser(html,result),formatUpdate(result);if("function"==typeof regex){const _=regex(html);return result.name=_.name,"string"==typeof _.updateTime?result.updateTime=parseDate(_.updateTime,options.format):null!=_.updateTime&&(result.updateTime=_.updateTime),formatUpdate(result)}else {let _regex=parseRegex(regex);stat("match");let matches;if(_regex instanceof Array){matches={};for(let re of _regex)Object.assign(matches,html.subRegexMap(re));}else {let _=_regex.exec(html);null!=_&&(matches=_.groups);}if(stat("match"),null==matches)return null;if(result.name=matches.name,matches.updateTime){let updateTime=matches.updateTime.trim();/\d{4}[\/-]\d{2}[\/-]\d{2} \d{2}:\d{2}:\d{3,}/.test(updateTime)&&(updateTime=updateTime.substring(0,19)),result.updateTime=parseDate(updateTime,options.format);}return formatUpdate(result)}}exports.parseUpdate=parseUpdate;