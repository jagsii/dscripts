function parseRegex(a){if(a instanceof RegExp)return a;if(a instanceof Array)return a;if("Synopsis"===a)return [/更新：(?<updateTime>[^<]+)/,/class="directoryArea">\s*<p>\s*<a[^>]*>(?<name>[^<]+)</];if("block_txt2"===a)return /<p>更新：(?<updateTime>[^<]*)<\/p>\s*<p>\s*最新(?:更新|章节)?：<a[^>]*>(?<name>[^<]*)</;if("meta"===a)return [/<meta [^>]*(?:property|name)=["']og:(?:novel:update_time|date)["'] ?content=["'](?<updateTime>[^"']+)["']/,/<meta [^>]*(?:property|name)=["']og:novel:las?t(?:est)?_chapter_name["'] ?content=["'](?<name>[^"']+)["']/];if("dd_box"===a)return /<dd>\s*<span style="width: 100%;">更新：(?<updateTime>[^<]+)<\/span>\s*<\/dd>\s*<dd>\s*<span style="width: 100%;">最新：<a[^>]*>(?<name>[^<]+)</;if("block-box"===a)return /最近更新：<\/span>\s*<a [^>]*>(?<name>[^<]+)<\/a>\s*<\/p>\s*<p class="time">\s*<span>更新时间：<\/span>(?<updateTime>[^<]*)/;if("pa"===a)return /更新(?:时间)?：\s*(?:<span[^>]*>)?(?<updateTime>[^<]*)(?:<\/span>)?\s*<\/p>\s*<p[^>]*>最新(?:章节)?：\s*<a[^>]+>(?<name>[^<]+)</;if("pap"===a)return /最[近新](?:更新|章节)：\s*(?:<\/span>)?<a[^>]+>(?<name>[^<]+)<\/a><\/p>\s*<p[^>]*>(?:<span[^>]*>)?更新(?:时间)?：\s*(?:<\/span>)?(?<updateTime>[^<]+)</;if("li>a"===a)return /更新：(?<updateTime>[^<>]+)<\/li>\s*<li>最新(?:章节)?：<a[^>]*>(?<name>[^<>]+)</;if("\u66F4\u65B0\uFF1Aa"===a)return /更新：<a[^>]+>(?<name>[^<]+)</;throw new Error(`unknown ParseUpdate regex ${a}`)}async function parseUpdate(a,b,c){c=c||{};const d={encoding:"utf-8","x-mobile":1,...c.clientOptions},e=require("datetime/parse_date");let f;if(c.webview){const b=require("webview_fetch");f=await b(a,{mobile:1===d["x-mobile"],...c.webviewOptions});}else {const b={url:a,...c.httpOptions},{send:e}=require("http");stat("request");let g=await e(b,d);if(stat("request"),c.onBlocked&&isBlocked(g))return c.onBlocked();if(null!=c.retry&&(g=await handleRequestRetry(g,b,d,e,c.retry)),c.fallbackToWebview&&c.fallbackToWebview(g)){const b=require("webview_fetch");f=await b(a,{mobile:1===d["x-mobile"],...c.webviewOptions});}else assertOK(g),f=g.body;}null!=c.preprocess&&(f=c.preprocess(f));const g={url:a,name:"",updateTime:null};if(c.parser)return await c.parser(f,g),g;if("function"==typeof b){const a=b(f);return g.name=a.name,"string"==typeof a.updateTime?g.updateTime=e(a.updateTime,c.format):null!=a.updateTime&&(g.updateTime=a.updateTime),g}else {let a=parseRegex(b);stat("match");let d;if(a instanceof Array){d={};for(let b of a)Object.assign(d,f.subRegexMap(b));}else {let b=a.exec(f);null!=b&&(d=b.groups);}return (stat("match"),null==d)?null:(g.name=d.name,d.updateTime&&(g.updateTime=e(d.updateTime,c.format)),g)}}exports.parseUpdate=parseUpdate;