async function parseCatalog(a,b){const c={url:a,...b.httpOptions},d={encoding:"utf-8",...b.clientOptions},e=require("utils/absolute_url");let f;if(b.webview){const b=require("webview_fetch");f=await b(a,{mobile:1===d["x-mobile"]});}else {const{send:a}=require("http");stat("request");let e=await a(c,d);if(stat("request"),null!=b.retry)for(;!0===(await b.retry(e,c,d,0));)e=await a(c,d);if(200>e.statusCode||299<e.statusCode)throw new Error(`Request failed with statusCode ${e.statusCode}, ${e.reasonPhrase}`);f=e.body;}stat("parseRegex");stat("parseRegex");stat("fragment");let g=/<ul id="chapter-list-[^>]*>(?<fragment>(?:\s*<li>\s*<a[^>]*>\s*<span>[^<]*<\/span>\s*<\/a>\s*<\/li>)+)/.exec(f).groups.fragment;stat("fragment"),stat("matchAll");const h=g.matchAll(/href="(?<url>[^"]+\d+\.html)"[^>]*>\s*<span>(?<name>[^<]+)</g);stat("matchAll");const i=[];stat("collect");for(let c of h)if(null!=c.groups.name){const b=/(?<id>\d+)\.html/.exec(c.groups.url).groups.id,d={id:b,name:c.groups.name,url:e(c.groups.url,a)};i.push(d);}return stat("collect"),i}exports.parseCatalog=parseCatalog;