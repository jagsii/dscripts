function decryptCCTXT(raw){let result;return raw.split("\n").forEach(_=>{if(_.startsWith("var cctxt="))return void(result=/var cctxt='(.+)';/.exec(_)[1]);if(_.startsWith("cctxt=cctxt.replace")){const{regex,char}=_.subRegexMap(/\/(?<regex>[^\/]+)\/g,\s*'(?<char>[^']+)'/);return void(result=result.replace(new RegExp(regex,"g"),char))}}),result}function decryptJS(raw){const code=raw.replace(/\{var _0x\w+=new RegExp\([^;]+(\);return _0x\w+\[[^;]+\(\)\);|;var _0x\w+=_0x[^?]+\?--[^:]+:--[^:]+;return this\[[^;]+;)\}/g,"{return true}").replace(/\{var _0x\w+=new RegExp\('[^']+'\);return!_0x\w+\[[^;]+\(\)\);\}/g,"{return false}").replace("var cctxt=","");return eval(code)}async function parseContent(url,bid,cid,options){const{parseContent}=await require("transcode/parse_content");return parseContent(url.substring(url.indexOf("url=")+4),null,{clientOptions:{...(options&&options.clientOptions)},transformer:raw=>0===raw.indexOf("var _0x")?decryptJS(raw):decryptCCTXT(raw)}).then(formatBookContent)}exports.parseContent=parseContent,exports.decryptCCTXT=decryptCCTXT;