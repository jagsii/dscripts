function decryptCCTXT(a){let b;return a.split("\n").forEach(a=>{if(a.startsWith("var cctxt="))return void(b=/var cctxt='(.+)';/.exec(a)[1]);if(a.startsWith("cctxt=cctxt.replace")){const{regex:c,char:d}=a.subRegexMap(/\/(?<regex>[^\/]+)\/g,\s*'(?<char>[^']+)'/);return void(b=b.replace(new RegExp(c,"g"),d))}}),b}function decryptJS(raw){const code=raw.replace(/\{var _0x\w+=new RegExp\([^;]+(\);return _0x\w+\[[^;]+\(\)\);|;var _0x\w+=_0x[^?]+\?--[^:]+:--[^:]+;return this\[[^;]+;)\}/g,"{return true}").replace(/\{var _0x\w+=new RegExp\('[^']+'\);return!_0x\w+\[[^;]+\(\)\);\}/g,"{return false}").replace("var cctxt=","");return eval(code)}async function parseContent(a,b,c,d){const{parseContent:e}=await require("transcode/parse_content");return e(a.substring(a.indexOf("url=")+4),null,{clientOptions:{...(d&&d.clientOptions)},transformer:a=>0===a.indexOf("var _0x")?decryptJS(a):decryptCCTXT(a)})}exports.parseContent=parseContent,exports.decryptCCTXT=decryptCCTXT;